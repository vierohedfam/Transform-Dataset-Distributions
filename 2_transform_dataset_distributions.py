# -*- coding: utf-8 -*-
"""2. Transform Dataset Distributions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WEjp4j8Pon9JNmO5Nvrqcn1Lqqjs2B-p

Import Libraries and Data
"""

import pandas as pd

from google.colab import files
uploaded = files.upload()

data = pd.read_csv('/content/cost_of_living [MConverter.eu] (1).csv')
data.head()

"""Dataset Distribution"""

# Importing plotting libraries
import matplotlib.pyplot as plt
import seaborn as sns

# Visualizing distribution of key numerical features
fig, axes = plt.subplots(1, 3, figsize=(20, 6))
sns.histplot(data=data, x='cost_index', ax=axes[0], bins=25)
sns.histplot(data=data, x='monthly_income', ax=axes[1], bins=25)
sns.histplot(data=data, x='purchasing_power_index', ax=axes[2], bins=25)

"""Normalize Data"""

# Importing the MinMaxScaler for normalization
from sklearn.preprocessing import MinMaxScaler

# Selecting numerical columms for scaling
df_to_scale = data[['cost_index', 'monthly_income', 'purchasing_power_index']].copy()

# Handling missing value (if any) by filling with 0
df_to_scale.fillna(0)

# Initializing and applying MinMaxScaler to normalize the data between 0 ans 1
scaler = MinMaxScaler()
normalized_data = scaler.fit_transform(df_to_scale)

# Converting the normalized data back into a DataFrame for ease of interpretation
normalized_data = pd.DataFrame(normalized_data, columns=df_to_scale.columns)

# Display original and normalized data for comparison
print("Original Data:")
print(df_to_scale.head())
print("\nNormalized Data:")
print(normalized_data.head())

# Visualizing the distribution of normalized data
fig, axes = plt.subplots(1, 3, figsize=(15, 5))
sns.histplot(data=normalized_data, x='cost_index', ax=axes[0], bins=25)
sns.histplot(data=normalized_data, x='monthly_income', ax=axes[1], bins=25)
sns.histplot(data=normalized_data, x='purchasing_power_index', ax=axes[2], bins=25)

"""Standardize Data"""

# Importing the StandardScaler for standardization
from sklearn.preprocessing import StandardScaler

# Re-selecting numerical columns for standardization (if normalized data should be separate)
df_to_scale = data[['cost_index', 'monthly_income', 'purchasing_power_index']].copy()
df_to_scale.fillna(0)

# Initializing and applying StandardScaler to standardize the data (mean = 0, std = 1)
scaler = StandardScaler()
scaled_data = scaler.fit_transform(df_to_scale)

# Converting the scaled data back into a DataFrame
scaled_data = pd.DataFrame(scaled_data, columns=df_to_scale.columns)

# Displaying orginal and standardize data
print("Original Data:")
print(df_to_scale.head())
print("\nStandardized Data:")
print(scaled_data.head())

# Visualizing the distribution of Standardizeed data
fig, axes = plt.subplots(1, 3, figsize=(15, 5))
sns.histplot(data=scaled_data, x='cost_index', ax=axes[0], bins=25)
sns.histplot(data=scaled_data, x='monthly_income', ax=axes[1], bins=25)
sns.histplot(data=scaled_data, x='purchasing_power_index', ax=axes[2], bins=25)

"""Transforming Skewed Data"""

# Commented out IPython magic to ensure Python compatibility.
# Importing necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib
from scipy.stats import skew, skewtest, norm
import scipy.stats as st
from scipy.stats import boxcox

# Visualizing the distribution of 'monthly_income' and checking skewness before log transformation
plt.figure(figsize=(8, 3))
sns.distplot(data['monthly_income'], fit=norm, color="r")
print("Skew before Log Transformation: %f" % data['monthly_income'].skew())
plt.show()

# Check skewness
print("Skew before Log Transformation: %f" % data['monthly_income'].skew())

"""* Log Transformation"""

# Log transformation to reduce skewness in 'monthly_income'
data['monthly_income_log'] = np.log1p(data['monthly_income'])

# Visualizing and checking skewness after log transformation
plt.figure(figsize=(8, 3))
sns.distplot(data['monthly_income_log'], fit=norm, color="r")
print("Skew after Log Transformation: %f" % data['monthly_income_log'].skew())

# Log transformation for 'cost_index' as well
data['Log_cost_index'] = np.log1p(data['cost_index'])

# Visualizing and checking skewness for 'cost_index'
sns.distplot(data['Log_cost_index'], fit=norm, color="r")
print("Skew after Log Transformation: %f" % data['Log_cost_index'].skew())

# Summary statistics for 'Log_cost_index'
data['Log_cost_index'].describe()

"""* Box-Cox Transformation"""

# Applying Box-Cox transformation on 'monthly_income' (lambda=0 corresponds to log transformation)
Box_cox = st.boxcox(data['monthly_income'], lmbda=0)

# Visualizing distribution and skewness after Box-Cox transformation
plt.figure(figsize=(8, 5))
sns.distplot(Box_cox, fit=norm, color="r")
print("Skew after Box-Cox Transformation: %f" % skew(Box_cox))

"""Binning Individual Variable"""

# Displaying summary statistics of the dataset to define bin ranges
data.describe()

# Defining bin edges and labels for 'cost_index'
bin_edges_cost = [0, 30, 70, 110, 150, 170]
bin_labels_cost = ['<30', '30-70', '70-110', '110-150', '150+']

# Binning 'cost_index' into categorical groups
data['cost_index_group'] = pd.cut(data['cost_index'], bins=bin_edges_cost, labels=bin_labels_cost, right=False)

# Defining bin edges and labels for 'monthly_income'
bin_edges_income = [0, 800, 5000, 10000]
bin_labels_income = ['low', 'middle', 'high']

# Binning 'monthly_income' into categorical groups
data['monthly_income_group'] = pd.cut(data['monthly_income'], bins=bin_edges_income, labels=bin_labels_income, right=False)

# Displaying the DataFrame with new binning columns
display(data)

# Define the bin edges and labels
bin_edges_cost = [0, 30, 70, 110, 150, 170]
bin_labels_cost = ['<30', '30-70', '70-110', '110-150', '150+']

# Define the bin edges and labels
bin_edges_income = [0, 800, 5000,10000]
bin_labels_income = ['low', 'middle', 'hight']

# Use Pandas' cut function to perform binning
data['cost_index_group'] = pd.cut(data['cost_index'], bins=bin_edges_cost, labels=bin_labels_cost, right=False)
data['monthly_income_group'] = pd.cut(data['monthly_income'], bins=bin_edges_income, labels=bin_labels_income, right=False)

# Print the DataFrame with the new "Age_Group" column
display(data)